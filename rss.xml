<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
  <channel>
    <title>一个人的狂欢</title>
    <link>http://jixiuf.github.io</link>
    <description></description>
    <pubDate>五, 03  2 2017 20:38:16 CST</pubDate>
    <lastBuildDate>五, 03  2 2017 20:38:16 CST</lastBuildDate>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>Org-page static site generator (https://github.com/kelvinh/org-page)</generator>
    <item>
      <title>AutoHotKey 简介</title>
      <link>http://jixiuf.github.io/blog/AutoHotKey_Introduce.html</link>
      <description><![CDATA[autohotkey 简介]]></description>
      <pubDate>2017-01-22</pubDate>
      <guid>http://jixiuf.github.io/blog/AutoHotKey_Introduce.html</guid>
    </item>
    <item>
      <title>anything-doc.org</title>
      <link>http://jixiuf.github.io/blog/anything-doc.html</link>
      <description><![CDATA[<div>
<div class="post">
<h1>anything-doc.org</h1>
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">Introduction</a></li>
<li><a href="#sec-2">Active &lt;Anything&gt;</a></li>
<li><a href="#sec-3">keybindings when &lt;Anything&gt; is activated</a>
<ul>
<li><a href="#sec-3-1">keybindings for select candiates</a></li>
<li><a href="#sec-3-2">keybindings for execute actions</a></li>
<li><a href="#sec-3-3">keybindings for edit</a></li>
</ul>
</li>
<li><a href="#sec-4">anything-source I have written</a>
<ul>
<li><a href="#sec-4-1">anything-explorer-history.ahk</a></li>
<li><a href="#sec-4-2">anything-favorite-directories.ahk (with with   anything-explorer-history.ahk )</a></li>
<li><a href="#sec-4-3">anything-run.ahk is a replacement of &lt;Win-r&gt;</a></li>
<li><a href="#sec-4-4">anything-window-switch.ahk is a replacement of Alt-Tab</a></li>
<li><a href="#sec-4-5">anything-process-manager.ahk</a></li>
<li><a href="#sec-4-6">anything-services.ahk</a></li>
</ul>
</li>
<li><a href="#sec-5">how to  write an anything-source</a>
<ul>
<li><a href="#sec-5-1">&lt;name&gt;  (required)</a></li>
<li><a href="#sec-5-2">&lt;candidate&gt;  (required)</a></li>
<li><a href="#sec-5-3">&lt;action&gt;  (required)</a></li>
<li><a href="#sec-5-4">&lt;icon&gt; (optional)</a></li>
<li><a href="#sec-5-5">&lt;match&gt; (optional) default: "anything_match"</a></li>
<li><a href="#sec-5-6">&lt;anything-execute-action-at-once-if-one&gt; (optional)</a></li>
<li><a href="#sec-5-7">&lt; anything-execute-action-at-once-if-one-even-no-keyword &gt; (optional)</a></li>
<li><a href="#sec-5-8">&lt;anything-action-when-2-candidates-even-no-keyword&gt; (optional)</a></li>
<li><a href="#sec-5-9">call anything</a></li>
</ul>
</li>
<li><a href="#sec-6">anything-properties</a></li>
<li><a href="#sec-7">global variable</a></li>
<li><a href="#sec-8">Known Bugs</a></li>
</ul>
</div>
</div>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Introduction</h2>
<div class="outline-text-2" id="text-1">
<p>
If you use GNU/Emacs  maybe you have known "Anything"<br  />
maybe not ,<br  />
you can visit "Anything" on <a href="http://www.emacswiki.org/emacs/Anything%20">Emacswiki</a><br  />
and see what "Anything" it is .<br  />
and this isn't anything.el ,it 's anything.ahk.<br  />
if you think anything.ahk is great ,<br  />
and have written an anything-source for it ,you can post it on  <a href="http://www.autohotkey.com/forum/viewtopic.php?t=72833">autohotkey-forum</a><br  />
</p>

<p>
there are some screencast here(no voice) :<br  />
</p>
<ul class="org-ul">
<li><a href="http://www.screenr.com/xxss">http://www.screenr.com/xxss</a><br  />
</li>
<li><a href="http://www.screenr.com/vp8s">http://www.screenr.com/vp8s</a> (new one )<br  />
</li>
<li><a href="http://www.screenr.com/BH7s">http://www.screenr.com/BH7s</a> and another one show anything-favorite-directories.ahk<br  />
</li>
<li><a href="http://www.screenr.com/MyHs">http://www.screenr.com/MyHs</a> and another show anything-window-switch.ahk<br  />
</li>
<li><a href="http://www.screenr.com/Zbjs">http://www.screenr.com/Zbjs</a> (new one ,show anything-services.ahk)<br  />
</li>
</ul>

<p>
you can also download these videos<br  />
</p>
<ul class="org-ul">
<li><a href="http://screencast-repos.googlecode.com/files/anything-expl-run.mp4">anything-explore-history.ahk_anything-run.ahk.mp4</a><br  />
</li>
<li><a href="http://screencast-repos.googlecode.com/files/anything.ahk-anything-explorer-history.mp4">anything-explore-history.ahk.mp4</a><br  />
</li>
<li><a href="http://screencast-repos.googlecode.com/files/anything-window-switch.mp4">anything-window-switch.mp4</a><br  />
</li>
<li><a href="http://screencast-repos.googlecode.com/files/anything-fav-dir.mp4">anything-favorite-directories.ahk.mp4</a><br  />
</li>
<li><a href="http://screencast-repos.googlecode.com/files/anything-services.ahk.zip">http://screencast-repos.googlecode.com/files/anything-services.ahk.zip</a><br  />
</li>
</ul>

<p>
and source code is host on <a href="https://github.com/jixiuf/my_autohotkey_scripts/tree/master/ahk_scripts">Github</a><br  />
</p>

<p>
you can follow these links ,and save them on you disk .<br  />
</p>
<ul class="org-ul">
<li><a href="https://github.com/jixiuf/my_autohotkey_scripts/raw/master/ahk_scripts/anything.ahk">anything.ahk</a> (core)<br  />
</li>
<li><a href="https://github.com/jixiuf/my_autohotkey_scripts/raw/master/ahk_scripts/anything-explorer-history.ahk">anything-explorer-history.ahk</a> (an anything-source)<br  />
</li>
<li><a href="https://github.com/jixiuf/my_autohotkey_scripts/raw/master/ahk_scripts/anything-favorite-directories.ahk">anything-favorite-directories.ahk</a> (an anything-source)<br  />
</li>
<li><a href="https://github.com/jixiuf/my_autohotkey_scripts/raw/master/ahk_scripts/anything-run.ahk">anything-run.ahk</a> (an anything-source)<br  />
</li>
<li><a href="https://github.com/jixiuf/my_autohotkey_scripts/raw/master/ahk_scripts/anything-run-launch-plugin.ahk">anything-run-launch-plugin.ahk</a> (an anything-source work with anything-run.ahk)<br  />
</li>
<li><a href="https://github.com/jixiuf/my_autohotkey_scripts/raw/master/ahk_scripts/anything-window-switch.ahk">anything-window-switch.ahk</a> (an anything-source)<br  />
</li>
<li><a href="https://github.com/jixiuf/my_autohotkey_scripts/raw/master/ahk_scripts/anything-config.ahk">anything-config.ahk</a>  (config file)<br  />
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">Active &lt;Anything&gt;</h2>
<div class="outline-text-2" id="text-2">
<p>
to active anything.ahk , press F3 , or Windows+r , or Alt+TAB<br  />
see  <a href="https://github.com/jixiuf/my_autohotkey_scripts/raw/master/ahk_scripts/anything-config.ahk">anything-config.ahk</a>  for detail<br  />
</p>
</div>
</div>
<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">keybindings when &lt;Anything&gt; is activated</h2>
<div class="outline-text-2" id="text-3">
<p>
you can input search string just like google to narrow the candidates<br  />
</p>
</div>
<div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1">keybindings for select candiates</h3>
<div class="outline-text-3" id="text-3-1">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">Keybindings</th>
<th scope="col" class="left">Desc</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">Down or Ctrl+n</td>
<td class="left">select next candidate</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">Up or Ctrl+p</td>
<td class="left">select previous candidate</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">Ctrl+o</td>
<td class="left">will select next source ,that means ,all candidate from first source will be send to last</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">pageUp ,Alt-v</td>
<td class="left">pageup</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">pageDn ,Ctrl-v(doesn't work very well),Ctrl-d</td>
<td class="left">pageDn</td>
</tr>
</tbody>
</table>
</div>
</div>

<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2">keybindings for execute actions</h3>
<div class="outline-text-3" id="text-3-2">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">Keybindings</th>
<th scope="col" class="left">Desc</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">&lt;Click&gt;and  &lt;Enter&gt;</td>
<td class="left">to execute the default action with the selected candiate as parameter</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">&lt;Ctrl-j&gt;</td>
<td class="left">to execute the second action(if has) with the selected candidate as parameter</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">&lt;Ctrl-m&gt;</td>
<td class="left">to execute the third action(if has) with the selected candidate as parameter</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">&lt;Ctrl-k&gt;</td>
<td class="left">to execute the forth action (if has)with the selected candidate as parameter</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">&lt;Ctrl-e&gt;</td>
<td class="left">to execute the fifth action (if has)with the selected candidate as parameter</td>
</tr>
</tbody>
</table>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">Keybindings</th>
<th scope="col" class="left">Desc</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">&lt;Alt-j&gt;</td>
<td class="left">do the same to Ctrl-j ,but doesn't quit "Anything"</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">&lt;Alt-m&gt;</td>
<td class="left">do the same to Ctrl-m ,but doesn't quit "Anything"</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">&lt;Alt-k&gt;</td>
<td class="left">do the same to Ctrl-k ,but doesn't quit "Anything"</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">&lt;Alt-e&gt;</td>
<td class="left">do the same to Ctrl-k ,but doesn't quit "Anything"</td>
</tr>
</tbody>
</table>


<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">Keybindings</th>
<th scope="col" class="left">Desc</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">&lt;Ctrl-L&gt;</td>
<td class="left">will ignore all the candidates ,and treate the search string as candidate , and list all available "action" to execute on the special "candidate"</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">&lt;Ctrl-i&gt;</td>
<td class="left">do something similar to &lt;Ctrl-l&gt; ,but don't list all available "action" ,just execute the "action" special by "property": no_candidate_action</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">&lt;Esc&gt;  &lt;Ctrl-g&gt;</td>
<td class="left">quit Anything</td>
</tr>
</tbody>
</table>
</div>
</div>

<div id="outline-container-sec-3-3" class="outline-3">
<h3 id="sec-3-3">keybindings for edit</h3>
<div class="outline-text-3" id="text-3-3">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">Keybindings</th>
<th scope="col" class="left">Desc</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">backspace and Ctrl-h</td>
<td class="left">back delete a char</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">Ctrl-y</td>
<td class="left">paste</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">Ctrl-w</td>
<td class="left">copy  and quit anything session</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">Alt-w</td>
<td class="left">copy without quit anything session</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">anything-source I have written</h2>
<div class="outline-text-2" id="text-4">
<p>
Now I have wrote 6 &lt;anything-source&gt; for anything.ahk<br  />
</p>
<ul class="org-ul">
<li>anything-explorer-history.ahk ,<br  />
anything-source : &lt;anything_explorer_history_source&gt; defined here.<br  />
</li>
<li>anything-favorite-directories.ahk,<br  />
anything-source: &lt;anything_favorite_directories_source&gt; defined here.<br  />
</li>
<li>anything-run.ahk (a replacement of Windows+r)<br  />
         anything-source: &lt;anything_run_source&gt; defined here.<br  />
anything-run-launch-plugin.ahk (work together with anything-run.ahk)<br  />
         anything-source:   &lt;anything_run_launch_source&gt;  defined here.<br  />
</li>
<li>anything-window-switch.ahk (a replacement of Alt-Tab)<br  />
&lt;anything_window_switcher_source&gt; and<br  />
</li>
<li>anything-precess-manager.ahk<br  />
anything-source: &lt;anything_precess_manager_source&gt; defined here.<br  />
</li>
<li>anything-services.ahk<br  />
anything-source: &lt;anything_services_source&gt; defined here.<br  />
</li>
</ul>
</div>

<div id="outline-container-sec-4-1" class="outline-3">
<h3 id="sec-4-1">anything-explorer-history.ahk</h3>
<div class="outline-text-3" id="text-4-1">
<p>
when you visit directory (double click on a directory,up or back ) in<br  />
explorer.exe ,it can remember directories you have visited ,then you can<br  />
press &lt;F3&gt; to active "Anything" list all directory history you have<br  />
visited. ,you can revisit it easily with anything-explorer-history.ahk .<br  />
how to configure anything-explorer-history.ahk<br  />
<img src="/assets/blog/anything-doc.html/anything-directory-history1.JPG" alt="anything-directory-history1.JPG" /><br  />
<img src="/assets/blog/anything-doc.html/anything-directory-history2.JPG" alt="anything-directory-history2.JPG" /><br  />
<img src="/assets/blog/anything-doc.html/anything-directory-history3.JPG" alt="anything-directory-history3.JPG" /><br  />
<img src="/assets/blog/anything-doc.html/anything-directory-history4.JPG" alt="anything-directory-history4.JPG" /><br  />
<img src="/assets/blog/anything-doc.html/anything-directory-history5.JPG" alt="anything-directory-history5.JPG" /><br  />
<img src="/assets/blog/anything-doc.html/anything-directory-history6.JPG" alt="anything-directory-history6.JPG" /><br  />
</p>
</div>

<ul class="org-ul"><li><a id="sec-4-1-1" name="sec-4-1-1"></a>if you only have one anything-source :<br  /><div class="outline-text-4" id="text-4-1-1">
<p>
anything_explorer_history_source  (defined in  anything-explorer-history.ahk)<br  />
you can use it like this :<br  />
</p>
<div class="org-src-container">

<pre class="src src-c"><span style="color: #7fffd4;">#include</span> anything.ahk
<span style="color: #7fffd4;">#include</span> anything-explorer-history.ahk
f3::anything(anything_explorer_history_source)
</pre>
</div>
</div>
</li>

<li><a id="sec-4-1-2" name="sec-4-1-2"></a>if you also have other anything-sources ,<br  /><div class="outline-text-4" id="text-4-1-2">
<p>
 default  : it is included in anything-config.ahk<br  />
 you just need add<br  />
     anything_explorer_history_source<br  />
 to the sources<br  />
for example :<br  />
</p>
<div class="org-src-container">

<pre class="src src-c"><span style="color: #7fffd4;">#include</span> anything.ahk
<span style="color: #7fffd4;">#include</span> anything-explorer-history.ahk
<span style="color: #7fffd4;">#include</span> anything-favorite-directories.ahk
 f3::
 sources:=Array()
 ;; anything_explorer_history_source is <span style="color: #8DA6CE;">an</span> <span style="color: #FF6400;">anything</span>-source defined in  anything-explorer-history.ahk   
 sources.insert(anything_explorer_history_source)
 ;; anything_favorite_directories_source is <span style="color: #8DA6CE;">an</span> <span style="color: #FF6400;">anything</span>-source defined in anything-favorites-directory.ahk
 sources.insert(anything_favorite_directories_source)
 anything_multiple_sources(sources)
 <span style="color: #FBDE2D;">return</span>
</pre>
</div>
</div>
</li>
<li><a id="sec-4-1-3" name="sec-4-1-3"></a>actions for anything-explorer-history.ahk<br  /><div class="outline-text-4" id="text-4-1-3">
<div class="org-src-container">

<pre class="src src-c">anything_explorer_history_source[<span style="color: #ffa07a;">"action"</span>]:=Array(<span style="color: #ffa07a;">"visit_directory"</span>,<span style="color: #ffa07a;">"delete_from_directory_history"</span> ,<span style="color: #ffa07a;">"delete_all_directory_history"</span>)
</pre>
</div>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">actions</th>
<th scope="col" class="left">description</th>
<th scope="col" class="left">key binding</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">visit_directory</td>
<td class="left">visit selected directory</td>
<td class="left">&lt;Click&gt;and  &lt;Enter&gt;</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">delete_from_directory_history</td>
<td class="left">delete select directory from  directory history</td>
<td class="left">&lt;Ctrl-j&gt;</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">delete_all_directory_history</td>
<td class="left">add a new directory to  directory history</td>
<td class="left">&lt;Ctrl-m&gt;</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">list all actions for current candidate</td>
<td class="left">&#xa0;</td>
<td class="left">TAB</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">list all actions</td>
<td class="left">&#xa0;</td>
<td class="left">&lt;Ctrl-L&gt;</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">-&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;+&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;+---------------------</td>
</tr>
</tbody>
</table>
</div>
</li></ul>
</div>

<div id="outline-container-sec-4-2" class="outline-3">
<h3 id="sec-4-2">anything-favorite-directories.ahk (with with   anything-explorer-history.ahk )</h3>
<div class="outline-text-3" id="text-4-2">
<p>
 anything-favorite-directories.ahk  do something similiar to <a href="https://github.com/jixiuf/my_autohotkey_scripts/raw/master/ahk_scripts/anything-explorer-history.ahk">anything-explorer-history.ahk</a> <br  />
 add your favorite directories ,and visit it using "Anything".<br  />
<img src="/assets/blog/anything-doc.html/anything-fav-history1.JPG" alt="anything-fav-history1.JPG" /><br  />
<img src="/assets/blog/anything-doc.html/anything-fav-history2.JPG" alt="anything-fav-history2.JPG" /><br  />
<img src="/assets/blog/anything-doc.html/anything-fav-history3.JPG" alt="anything-fav-history3.JPG" /><br  />
<img src="/assets/blog/anything-doc.html/anything-fav-history4.JPG" alt="anything-fav-history4.JPG" /><br  />
</p>
</div>


<ul class="org-ul"><li><a id="sec-4-2-1" name="sec-4-2-1"></a>how to configure it .<br  /><div class="outline-text-4" id="text-4-2-1">
<p>
if you use anything-favorites-directory as the only source for anything.ahk<br  />
you just need to bind it to a key like this :<br  />
</p>
<div class="org-src-container">

<pre class="src src-c"><span style="color: #7fffd4;">#include</span> anything.ahk
 ;; anything_favorite_directories_source is <span style="color: #8DA6CE;">an</span> <span style="color: #FF6400;">anything</span>-source defined in anything-favorites-directory.ahk
<span style="color: #7fffd4;">#include</span> anything-favorites-directory.ahk
f1::anything(anything_favorite_directories_source)
</pre>
</div>

<p>
if you also use other sources ,just need add "anything_favorite_directories_source" to<br  />
the array of sources for anything_multiple_sources(sources)<br  />
default have added to  anything-config.ahk<br  />
</p>
<div class="org-src-container">

<pre class="src src-c"><span style="color: #7fffd4;">#include</span> anything.ahk
<span style="color: #7fffd4;">#include</span> anything-explorer-history.ahk
<span style="color: #7fffd4;">#include</span> anything-favorite-directories.ahk
 f3::
 sources:=Array()
 ;; anything_explorer_history_source is <span style="color: #8DA6CE;">an</span> <span style="color: #FF6400;">anything</span>-source defined in  anything-explorer-history.ahk   
 sources.insert(anything_explorer_history_source)
 ;; anything_favorite_directories_source is <span style="color: #8DA6CE;">an</span> <span style="color: #FF6400;">anything</span>-source defined in anything-favorites-directory.ahk
 sources.insert(anything_favorite_directories_source)
 anything_multiple_sources(sources)
 <span style="color: #FBDE2D;">return</span>
</pre>
</div>
</div>
</li>

<li><a id="sec-4-2-2" name="sec-4-2-2"></a>how to add a new Folder to your favorite-directories<br  /><div class="outline-text-4" id="text-4-2-2">
<p>
for this anything-source , your favorite directories<br  />
are the candidates ,so before you can use it ,you should<br  />
add some candidates (some directories).<br  />
</p>
<ol class="org-ol">
<li>first activate "Anything" (default press F3 )<br  />
</li>
</ol>
<p>
2 Press &lt;Ctrl-L&gt; list all available actions select<br  />
"call action: Favdirs.anything_favorite_directories_add "<br  />
if you don't kown what's the meaning of &lt;Ctrl-L&gt; ,<br  />
see keybindings for execute actions.<br  />
anything_favorite_directories_source have three actions<br  />
</p>
<div class="org-src-container">

<pre class="src src-c">anything_favorite_directories_source[<span style="color: #ffa07a;">"action"</span>]:=Array(<span style="color: #ffa07a;">"anything_favorite_directories_visit"</span>,<span style="color: #ffa07a;">"anything_favorite_directories_delete"</span>,<span style="color: #ffa07a;">"anything_favorite_directories_add"</span>)
</pre>
</div>
</div>
</li>
<li><a id="sec-4-2-3" name="sec-4-2-3"></a>actions for anything-favorite-directories.ahk<br  /><div class="outline-text-4" id="text-4-2-3">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">actions</th>
<th scope="col" class="left">description</th>
<th scope="col" class="left">key binding</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">anything_favorite_directories_visit</td>
<td class="left">visit selected directory</td>
<td class="left">&lt;Click&gt;and  &lt;Enter&gt;</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">anything_favorite_directories_delete</td>
<td class="left">delete select directory from favorite directories</td>
<td class="left">&lt;Ctrl-j&gt;</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">anything_favorite_directories_add</td>
<td class="left">add a new directory to favorite directories</td>
<td class="left">&lt;Ctrl-m&gt;</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">list all actions for current candidate</td>
<td class="left">&#xa0;</td>
<td class="left">TAB</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">list all actions</td>
<td class="left">&#xa0;</td>
<td class="left">&lt;Ctrl-L&gt;</td>
</tr>
</tbody>
</table>
</div>
</li>

<li><a id="sec-4-2-4" name="sec-4-2-4"></a>then you can use "Anything" selected one of your favorite directory<br  /><div class="outline-text-4" id="text-4-2-4">
<ul class="org-ul">
<li>it will visit your selected directory in current Explorer.exe (if current activated window is Explorer.exe)<br  />
</li>
<li>it will visit your selected directory in current cmd.exe (if current activated window is cmd.exe)<br  />
</li>
<li>it will visit your selected directory in current msys.bat (if current activated window is msys.bat)<br  />
</li>
</ul>
</div>
</li></ul>
</div>

<div id="outline-container-sec-4-3" class="outline-3">
<h3 id="sec-4-3">anything-run.ahk is a replacement of &lt;Win-r&gt;</h3>
<div class="outline-text-3" id="text-4-3">
<p>
it could remember old command too. when you press &lt;Windows+r&gt;<br  />
about how to use it .see comments in anything-run.ahk<br  />
<img src="/assets/blog/anything-doc.html/anything-run1.JPG" alt="anything-run1.JPG" /><br  />
</p>

<div class="org-src-container">

<pre class="src src-c"><span style="color: #7fffd4;">#include</span> anything.ahk
<span style="color: #7fffd4;">#include</span> anything-run.ahk
<span style="color: #7fffd4;">#include</span> anything-run-launch-plugin.ahk

<span style="color: #7fffd4;">#r</span>::
<span style="color: #D8FA3C;">my_anything_properties2</span>:=Object()
my_anything_properties2[<span style="color: #ffa07a;">"anything_use_large_icon"</span>]:=0
my_anything_properties2[<span style="color: #ffa07a;">"FontSize"</span>]:= 12
anything_multiple_sources_with_properties(Array(anything_run_source, anything_run_launch_source),my_anything_properties2)
<span style="color: #FBDE2D;">return</span>
</pre>
</div>
<p>
if a command(candidate) have not been added ,you can type the command in the<br  />
textfield (for example :"cmd") add press &lt;Ctrl-L&gt; list all available actions select<br  />
call action: Run.anything_run<br  />
then a cmd.exe is executed ,and "cmd" as a candidate is add to candidates<br  />
</p>

<p>
you can also append other anything-source,for example<br  />
</p>
<div class="org-src-container">

<pre class="src src-c"><span style="color: #7fffd4;">#r</span>::
<span style="color: #D8FA3C;">sources</span>:=Array()
sources.insert(anything_cmd_source)
sources.insert(anything_run_launch_source)
sources.insert(anything_explorer_history_source)
sources.insert(anything_favorite_directories_source)
anything_multiple_sources(sources)
<span style="color: #FBDE2D;">return</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-4-4" class="outline-3">
<h3 id="sec-4-4">anything-window-switch.ahk is a replacement of Alt-Tab</h3>
<div class="outline-text-3" id="text-4-4">

<div class="figure">
<p><img src="/assets/blog/anything-doc.html/anything-ws.JPG" alt="anything-ws.JPG" /><br  />
</p>
</div>
<div class="org-src-container">

<pre class="src src-c"><span style="color: #7fffd4;">#include</span> anything.ahk
<span style="color: #7fffd4;">#include</span> anything-window-<span style="color: #FBDE2D;">switch</span>.ahk 
 !Tab::
; <span style="color: #8DA6CE;">custom</span> <span style="color: #FF6400;">anything</span>-properties (window width and <span style="color: #8DA6CE;">window</span> <span style="color: #40E0D0;">height</span>)
 my_anything_properties:=Object()
 my_anything_properties[<span style="color: #ffa07a;">"win_width"</span>]:= 900    
 my_anything_properties[<span style="color: #ffa07a;">"win_height"</span>]:= 180

 sources:=Array()
 sources.insert(anything_window_switcher_source)
 anything_multiple_sources_with_properties(sources,my_anything_properties)
 <span style="color: #FBDE2D;">return</span>
</pre>
</div>
<p>
anything-window-switch.ahk will treat all windows as candidates<br  />
the window_title window_process_name is used to fitler.<br  />
actions for anything-window-switch.ahk<br  />
</p>
<div class="org-src-container">

<pre class="src src-c">anything_window_switcher_source[<span style="color: #ffa07a;">"action"</span>]:=Array(<span style="color: #ffa07a;">"anything_ws_activate_window"</span>, <span style="color: #ffa07a;">"anything_ws_close_window"</span> ,<span style="color: #ffa07a;">"anything_ws_assign_key_4_current_window"</span>, <span style="color: #ffa07a;">"anything_ws_kill_process"</span>)
</pre>
</div>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">actions</th>
<th scope="col" class="left">description</th>
<th scope="col" class="left">key binding</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">anything_ws_activate_window</td>
<td class="left">visit selected window</td>
<td class="left">&lt;Click&gt;and  &lt;Enter&gt;</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">anything_ws_close_window</td>
<td class="left">close selected window</td>
<td class="left">&lt;Ctrl-j&gt;</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">anything_ws_assign_key_4_current_window</td>
<td class="left">assign some special "TEXT" to your selected window ,then you can use it to selected the assigned window</td>
<td class="left">&lt;Ctrl-m&gt;</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">anything_ws_kill_process</td>
<td class="left">kill process of selected window</td>
<td class="left">&lt;Ctrl-k&gt;</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">anything_ws_exclude_window_by_class</td>
<td class="left">don't list this window as candidates(excluded by ahk_class)</td>
<td class="left">&lt;Ctrl-e&gt;</td>
</tr>
</tbody>
<tbody>
<tr>
<td class="left">list all actions for current candidate</td>
<td class="left">&#xa0;</td>
<td class="left">TAB</td>
</tr>
</tbody>
</table>

<p>
about the third action : anything_ws_assign_key_4_current_window<br  />
for example :there are three windows opened now : Firefox Explore ,Emacs<br  />
now the selected candidate is "Firefox" ,and you press &lt;Ctrl-m&gt;<br  />
then a InputBox appear ,and you type in "www" .<br  />
next time you press Alt-TAB ,and type "www" Firefox is activated<br  />
</p>
</div>
</div>
<div id="outline-container-sec-4-5" class="outline-3">
<h3 id="sec-4-5">anything-process-manager.ahk</h3>
<div class="outline-text-3" id="text-4-5">
<p>
is a process manager , you can use it kill a selected process<br  />
or change the priority of the process<br  />
   <img src="/assets/blog/anything-doc.html/anything-process.jpg" alt="anything-process.jpg" /><br  />
   <img src="/assets/blog/anything-doc.html/anything-process2.jpg" alt="anything-process2.jpg" /><br  />
</p>
<div class="org-src-container">

<pre class="src src-c"><span style="color: #7fffd4;">#include</span> anything.ahk
<span style="color: #7fffd4;">#include</span> anything-process-manager.ahk
f2::
anything(anything_process_manager_source)
<span style="color: #FBDE2D;">return</span>
</pre>
</div>

<p>
2  if you also have other anything-sources ,<br  />
    you just need add<br  />
        anything_process_manager_source<br  />
    to the sources<br  />
   for example :<br  />
</p>
<div class="org-src-container">

<pre class="src src-c"><span style="color: #7fffd4;">#include</span> anything.ahk
<span style="color: #7fffd4;">#include</span> anything-process-manager.ahk
<span style="color: #7fffd4;">#include</span> anything-services.ahk
 ^f4::
  sources:=Array()
  sources.Insert(anything_services_source)
  sources.Insert(anything_process_manager_source)  ;         &lt;--------- here.
  anything_multiple_sources(sources)
 <span style="color: #FBDE2D;">return</span>
</pre>
</div>
</div>
</div>


<div id="outline-container-sec-4-6" class="outline-3">
<h3 id="sec-4-6">anything-services.ahk</h3>
<div class="outline-text-3" id="text-4-6">
<p>
is a Windows Services Manager ,just like services.msc<br  />
it can start a stopped service ,or stop a running service<br  />
or change the start type of a service &lt;Manual&gt; &lt;Disabled&gt;&lt;Automictal&gt;<br  />
   <img src="/assets/blog/anything-doc.html/anything-services1.JPG" alt="anything-services1.JPG" /><br  />
   <img src="/assets/blog/anything-doc.html/anything-services2.JPG" alt="anything-services2.JPG" /><br  />
</p>
<div class="org-src-container">

<pre class="src src-c"><span style="color: #7fffd4;">#include</span> anything.ahk
<span style="color: #7fffd4;">#include</span> anything-services.ahk
f4::
anything(anything_services_source)
<span style="color: #FBDE2D;">return</span>
</pre>
</div>

<p>
2  if you also have other anything-sources ,<br  />
    you just need add<br  />
        anything_services_source<br  />
    to the sources<br  />
   for example :<br  />
</p>
<div class="org-src-container">

<pre class="src src-c"><span style="color: #7fffd4;">#include</span> anything.ahk
<span style="color: #7fffd4;">#include</span> anything-process-manager.ahk
<span style="color: #7fffd4;">#include</span> anything-services.ahk
 ^f4::
  sources:=Array()
  sources.Insert(anything_services_source) ;         &lt;--------- here.
  sources.Insert(anything_process_manager_source) 
  anything_multiple_sources(sources)
 <span style="color: #FBDE2D;">return</span>
</pre>
</div>
</div>
</div>
</div>


<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5">how to  write an anything-source</h2>
<div class="outline-text-2" id="text-5">
<p>
an anything-source is an Object with some pre-defined properties<br  />
now it support 8 anything-source-properties :<br  />
</p>
<ul class="org-ul">
<li>name<br  />
</li>
<li>action<br  />
</li>
<li>candidate<br  />
</li>
<li>icon<br  />
</li>
<li>match<br  />
</li>
<li>anything-execute-action-at-once-if-one<br  />
</li>
<li>anything-execute-action-at-once-if-one-even-no-keyword<br  />
</li>
<li>anything-action-when-2-candidates-even-no-keyword<br  />
</li>
</ul>
<p>
for example:<br  />
</p>
<div class="org-src-container">

<pre class="src src-c"><span style="color: #D8FA3C;">my_source</span>:=Object()
</pre>
</div>
</div>
<div id="outline-container-sec-5-1" class="outline-3">
<h3 id="sec-5-1">&lt;name&gt;  (required)</h3>
<div class="outline-text-3" id="text-5-1">
<p>
&lt;name&gt; is a string ,it is just a name of this anything-source<br  />
</p>
<div class="org-src-container">

<pre class="src src-c">my_source[<span style="color: #ffa07a;">"name"</span>]:=<span style="color: #ffa07a;">"my_source_name"</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-sec-5-2" class="outline-3">
<h3 id="sec-5-2">&lt;candidate&gt;  (required)</h3>
<div class="outline-text-3" id="text-5-2">
<p>
&lt;candidate&gt; is an array of all candidates ,or a function name(string)<br  />
without parameter which return an array .<br  />
each element of the array can be :<br  />
</p>
</div>
<ul class="org-ul"><li><a id="sec-5-2-1" name="sec-5-2-1"></a>a string<br  /><div class="outline-text-4" id="text-5-2-1">
<p>
 this string will be displayed on listview , so that you can select one<br  />
 of the candidates ,and execute action on your selected candidate.<br  />
for example:<br  />
</p>
<div class="org-src-container">

<pre class="src src-c">my_source[<span style="color: #ffa07a;">"candidate"</span>] :=Array(<span style="color: #ffa07a;">"red"</span>,<span style="color: #ffa07a;">"green"</span>)
</pre>
</div>
<p>
or<br  />
</p>
<div class="org-src-container">

<pre class="src src-c"> <span style="color: #FF6400;">my_candidates_fun</span>()
 {
     <span style="color: #FBDE2D;">return</span> Array(<span style="color: #ffa07a;">"red"</span>,<span style="color: #ffa07a;">"green"</span>)
 }
my_source[<span style="color: #ffa07a;">"candidate"</span>]:=<span style="color: #ffa07a;">"my_candidates_fun"</span>
</pre>
</div>
</div>
</li>
<li><a id="sec-5-2-2" name="sec-5-2-2"></a>an array<br  /><div class="outline-text-4" id="text-5-2-2">
<p>
the first element of this array must be a string ,the string will be<br  />
displayed on listview ,and you can selected one of the candidates ,and<br  />
execute action on your selected candidate.<br  />
other element of this array can be anything , you can store useful info.<br  />
there. and when you execute action on your selected candidate,the selected<br  />
candidate will be the parameter for the function specified by property "action"<br  />
see &lt;action&gt;<br  />
  for example:<br  />
</p>
<div class="org-src-container">

<pre class="src src-c">my_source[<span style="color: #ffa07a;">"candidate"</span>]:=Array(
             Array(<span style="color: #ffa07a;">"red"</span>,<span style="color: #ffa07a;">"useful info ,string ,object or anything(red) "</span>),
             Array(<span style="color: #ffa07a;">"green"</span>,<span style="color: #ffa07a;">"useful info ,string ,object or anything(red)"</span>)
             )
</pre>
</div>
</div>
</li></ul>
</div>

<div id="outline-container-sec-5-3" class="outline-3">
<h3 id="sec-5-3">&lt;action&gt;  (required)</h3>
<div class="outline-text-3" id="text-5-3">
<p>
&lt;action&gt; is a function name(string) or a list of function name (array).<br  />
and those functions must have one parameter. actually the parameter is<br  />
the selected &lt;candidate&gt; .<br  />
</p>
<div class="org-src-container">

<pre class="src src-c">   <span style="color: #D8FA3C;">my_action</span>:=<span style="color: #ffa07a;">"my_action_fun"</span>
            my_action_fun(candidate)
          {
            MsgBox , %candidate%
          }
my_source[<span style="color: #ffa07a;">"action"</span>]:=my_action
</pre>
</div>
<p>
or<br  />
</p>
<div class="org-src-container">

<pre class="src src-c">   <span style="color: #D8FA3C;">my_action</span>:=<span style="color: #ffa07a;">"my_action_fun"</span>
            my_action_fun(candidate)
          {
            display :=candidate[1]
            usefulinfo :=candidate[2]
            MsgBox % usefulinfo  
          }
my_source[<span style="color: #ffa07a;">"action"</span>]:=my_action
</pre>
</div>

<p>
or<br  />
</p>
<div class="org-src-container">

<pre class="src src-c">  <span style="color: #D8FA3C;">my_action</span>:=Array(<span style="color: #ffa07a;">"my_action_fun"</span>,<span style="color: #ffa07a;">"my_action_fun2"</span>)
            <span style="color: #FF6400;">my_action_fun</span>(candidate)
          {
            MsgBox , %candidate% from action_fun
          }
            <span style="color: #FF6400;">my_action_fun2</span>(candidate)
          {
            MsgBox , %candidate% from action_fun2
          }

my_source[<span style="color: #ffa07a;">"action"</span>]:=my_action
</pre>
</div>
</div>
</div>
<div id="outline-container-sec-5-4" class="outline-3">
<h3 id="sec-5-4">&lt;icon&gt; (optional)</h3>
<div class="outline-text-3" id="text-5-4">
<p>
&lt;icon&gt; is a function(string) which return an ImageList.<br  />
this property is optional .if this property isn't empty<br  />
&lt;Anything&gt; will display icon before each candidates.<br  />
</p>
<div class="org-src-container">

<pre class="src src-c"> <span style="color: #FF6400;">icon_fun</span>()
 {
     <span style="color: #D8FA3C;">ImageListID</span> := IL_Create(2)  ; Create an ImageList <span style="color: #8DA6CE;">to</span> <span style="color: #40E0D0;">hold</span> 10 small icons.
     Loop 2  ; Load the ImageList with a series of icons from <span style="color: #8DA6CE;">the</span> <span style="color: #FF6400;">DLL</span>.
     IL_Add(ImageListID, <span style="color: #ffa07a;">"shell32.dll"</span>, A_Index)
     <span style="color: #FBDE2D;">return</span> ImageListID
 }
<span style="color: #D8FA3C;">my_icon</span> :=<span style="color: #ffa07a;">"icon_fun"</span>
my_source[<span style="color: #ffa07a;">"icon"</span>]:=my_icon
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-5-5" class="outline-3">
<h3 id="sec-5-5">&lt;match&gt; (optional) default: "anything_match"</h3>
<div class="outline-text-3" id="text-5-5">
<p>
if it has value for example:<br  />
</p>
<div class="org-src-container">

<pre class="src src-c">        my_source[<span style="color: #ffa07a;">"match"</span>]:=<span style="color: #ffa07a;">"anything_match"</span>
; <span style="color: #8DA6CE;">or</span> 
        <span style="color: #40E0D0;">my_source</span>[<span style="color: #ffa07a;">"match"</span>]:=<span style="color: #ffa07a;">"anything_match_case_sensetive"</span>
</pre>
</div>
<p>
or any other value .<br  />
the value of it is a function name accept two parameters :(candidate,pattern)<br  />
this function is used to filter candidates from all candidates depends<br  />
on what you have type in the textfield.<br  />
</p>

<p>
; if it match ,then return 1 ,else return 0<br  />
</p>

<p>
and these tow function is defined in anything.ahk<br  />
</p>
<div class="org-src-container">

<pre class="src src-c">;@param: candidate is current candidate passed to this function
;@param: pattern, is what you have typed in the <span style="color: #8DA6CE;">textfield</span>
<span style="color: #FF6400;">anything_match_case_sensetive</span>(candidate,pattern){}
<span style="color: #FF6400;">anything_match</span>(candidate,pattern){}
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-5-6" class="outline-3">
<h3 id="sec-5-6">&lt;anything-execute-action-at-once-if-one&gt; (optional)</h3>
<div class="outline-text-3" id="text-5-6">
<p>
if it has value  for example:<br  />
</p>
<div class="org-src-container">

<pre class="src src-c">my_source[<span style="color: #ffa07a;">"anything-execute-action-at-once-if-one"</span>]:=<span style="color: #ffa07a;">"yes"</span>
</pre>
</div>
<p>
then if only one candidate left on the listview it will execute the<br  />
    default action with the only one candidate as parameter automatically.<br  />
    you needn't press &lt;Enter&gt; here.<br  />
</p>
</div>
</div>
<div id="outline-container-sec-5-7" class="outline-3">
<h3 id="sec-5-7">&lt; anything-execute-action-at-once-if-one-even-no-keyword &gt; (optional)</h3>
<div class="outline-text-3" id="text-5-7">
<p>
  if it has value<br  />
for example<br  />
</p>
<div class="org-src-container">

<pre class="src src-c">my_source[<span style="color: #ffa07a;">"anything-execute-action-at-once-if-one"</span>]:=<span style="color: #ffa07a;">"yes"</span>
</pre>
</div>
<p>
then if only one candidate left on the listview even no key keyword in the<br  />
textfiled it will execute the default action with the only one candidate<br  />
as parameter auto. you needn't press &lt;Enter&gt; here.<br  />
</p>
</div>
</div>

<div id="outline-container-sec-5-8" class="outline-3">
<h3 id="sec-5-8">&lt;anything-action-when-2-candidates-even-no-keyword&gt; (optional)</h3>
<div class="outline-text-3" id="text-5-8">
<p>
the value of it is a function accept two parameters<br  />
</p>
<div class="org-src-container">

<pre class="src src-c"><span style="color: #FF6400;">funname</span>(candidate1,candidate2){}
my_source[<span style="color: #ffa07a;">"anything-action-when-2-candidates"</span>] :=<span style="color: #ffa07a;">"funname"</span>
</pre>
</div>

<p>
if only two candidats for you to select<br  />
then this function will be called .<br  />
anything-window-switch.ahk use this property :<br  />
when only two windows ,And you press Alt-Tab ,then select another window directly<br  />
without press RETURN by youself.<br  />
</p>
</div>
</div>
<div id="outline-container-sec-5-9" class="outline-3">
<h3 id="sec-5-9">call anything</h3>
<div class="outline-text-3" id="text-5-9">
<ol class="org-ol">
<li>anything(source)<br  />
<div class="org-src-container">

<pre class="src src-c">anything(my_source)
</pre>
</div>
</li>

<li>anything_multiple_sources(sources) with other anything-source<br  />
<div class="org-src-container">

<pre class="src src-c"><span style="color: #D8FA3C;">sources</span> := Array()
sources.Insert(my_source)
sources.Insert(other_source)
anything_multiple_sources(sources)
</pre>
</div>
</li>

<li>anything_with_properties(anything-source,anything-properties)<br  />
<div class="org-src-container">

<pre class="src src-c"><span style="color: #D8FA3C;">my_anything_properties</span>:=Object()
my_anything_properties[<span style="color: #ffa07a;">"win_width"</span>]:= 900
my_anything_properties[<span style="color: #ffa07a;">"win_height"</span>]:= 180
anything_with_properties(my_source,my_anything_properties)
</pre>
</div>
</li>
<li>anything_multiple_sources_with_properties(anything-sources,anything-properties)<br  />
<div class="org-src-container">

<pre class="src src-c"><span style="color: #D8FA3C;">my_anything_properties</span>:=Object()
my_anything_properties[<span style="color: #ffa07a;">"win_width"</span>]:= 900
my_anything_properties[<span style="color: #ffa07a;">"win_height"</span>]:= 180

sources:=Array()
sources.insert(my_source)
sources.insert(other_source)
anything_multiple_sources_with_properties(sources,my_anything_properties)
</pre>
</div>
</li>
</ol>
</div>
</div>
</div>
<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6">anything-properties</h2>
<div class="outline-text-2" id="text-6">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">properties</th>
<th scope="col" class="left">description</th>
<th scope="col" class="left">default vaule</th>
<th scope="col" class="left">type</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">win_width</td>
<td class="left">the width of anything window</td>
<td class="left">900</td>
<td class="left">integer</td>
</tr>

<tr>
<td class="left">win_height</td>
<td class="left">the height of anything window</td>
<td class="left">510</td>
<td class="left">integer</td>
</tr>

<tr>
<td class="left">Transparent</td>
<td class="left">the transparent of anything window</td>
<td class="left">225</td>
<td class="left">integer</td>
</tr>

<tr>
<td class="left">WindowColor</td>
<td class="left">the color of anything window</td>
<td class="left">"black"</td>
<td class="left">string</td>
</tr>

<tr>
<td class="left">ControlColor</td>
<td class="left">the color of control on anything window</td>
<td class="left">"black"</td>
<td class="left">string</td>
</tr>

<tr>
<td class="left">FontSize</td>
<td class="left">the font size of font on anyting window</td>
<td class="left">12</td>
<td class="left">integer</td>
</tr>

<tr>
<td class="left">FontColor</td>
<td class="left">the font colorof font on anyting window</td>
<td class="left">"c7cfc00"</td>
<td class="left">string</td>
</tr>

<tr>
<td class="left">FontWeight</td>
<td class="left">the font weight weight on font on anything window</td>
<td class="left">"bold"</td>
<td class="left">bold, italic, strike, underline, and norm</td>
</tr>

<tr>
<td class="left">quit_when_lose_focus</td>
<td class="left">auto quit anything when anything lose focus (yes or no)</td>
<td class="left">"yes"</td>
<td class="left">"yes" or "no"</td>
</tr>

<tr>
<td class="left">no_candidate_action</td>
<td class="left">when no candiates left and you press Ctrl-i ,this function is called</td>
<td class="left">"anything_do_nothing"</td>
<td class="left">a function name (accept one parameter)</td>
</tr>
</tbody>
</table>
<p>
see " how to  write an anything-source"/"call anything" section about how to use anything-properties<br  />
</p>
</div>
</div>
<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7">global variable</h2>
<div class="outline-text-2" id="text-7">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">global variable name</th>
<th scope="col" class="left">description</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">anything_wid</td>
<td class="left">anything window id</td>
</tr>

<tr>
<td class="left">anything_pattern</td>
<td class="left">anything pattern you have typed in the textfield</td>
</tr>

<tr>
<td class="left">anything_properties</td>
<td class="left">an Array of current anything propeties</td>
</tr>

<tr>
<td class="left">anything_previous_activated_win_id</td>
<td class="left">previous activated win_id before anthing-window appera</td>
</tr>
</tbody>
</table>
<p>
;; you can access these global variable when you write your anything-source<br  />
for the special anything property :<br  />
"quit_when_lose_focus"<br  />
when you create a new window(or Inputbox ,Dialog) while anything session is opened ,<br  />
then "anything" will lose focus ,because the new window you created is the child<br  />
window of "anything window" then it will be killed too.<br  />
so if you want to make it work<br  />
you can do it like this:<br  />
</p>
<div class="org-src-container">

<pre class="src src-c"><span style="color: #FF6400;">your_fun</span>(){
  <span style="color: #8DA6CE;">global</span> 
  <span style="color: #40E0D0;">old_value_of_quit_when_lose_focus</span>=anything_properties[<span style="color: #ffa07a;">"quit_when_lose_focus"</span>] 
  anything_set_property_4_quit_when_lose_focus(<span style="color: #ffa07a;">"no"</span>)
  ;write  your code <span style="color: #8DA6CE;">here</span> ...
  <span style="color: #FF6400;">anything_set_property_4_quit_when_lose_focus</span>(old_value_of_quit_when_lose_focus=anything_properties)
 }
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-8" class="outline-2">
<h2 id="sec-8">Known Bugs</h2>
<div class="outline-text-2" id="text-8">
<ul class="org-ul">
<li>when sometimes you type too quickly , letters get dropped from<br  />
search key , the letters get typed and then deleted .<br  />
or you type "ab" but got "ba".<br  />
or you type "abc" ,only "ab" are used to filter candidates<br  />

<p>
Becuase I use Input() in a loop to read what you have typed<br  />
if the code in loop take too long time ,maybe when you type next char<br  />
the Input() hasn't been called . so the letter would be dropped<br  />
I try to fix this by compare %anything_pattern% with text in the textfield<br  />
if they are different ,then I know some letter got dropped ,but it seems<br  />
doesn't work very well(Now is fixed.)<br  />
</p>
</li>

<li>anything-explorer-history.ahk must be the last included file<br  />

<p>
maybe the reason is<br  />
there is some code look like this<br  />
</p>

<p>
   #IfWinActive ahk_class ExploreWClass|CabinetWClass<br  />
or<br  />
   Return<br  />
</p>
</li>
</ul>
</div>
</div>

</div>
</div>]]></description>
      <pubDate>2017-01-22</pubDate>
      <guid>http://jixiuf.github.io/blog/anything-doc.html</guid>
    </item>
    <item>
      <title>jenkins打包xcode项目</title>
      <link>http://jixiuf.github.io/blog/jenkins_xcode.html</link>
      <description><![CDATA[jenkins打包xcode项目]]></description>
      <pubDate>2017-01-22</pubDate>
      <guid>http://jixiuf.github.io/blog/jenkins_xcode.html</guid>
    </item>
    <item>
      <title>Emacs可以做什么(功能演示)</title>
      <link>http://jixiuf.github.io/blog/what-emacs-can-do.html</link>
      <description><![CDATA[<div>
<div class="post">
<h1>Emacs可以做什么(功能演示)</h1>
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">Tips: dropbox 里的视频不要用迅雷下载， 似乎下不了(PS. 似乎国内现在封了dropbox，试从微盘vdist.weibo.com下载相应的视频链接)</a></li>
<li><a href="#sec-2">AutoComplete</a></li>
<li><a href="#sec-3">AutoJavaComplete</a></li>
<li><a href="#sec-4">auto-complete-clang</a></li>
<li><a href="#sec-5">yasnippet  模版</a></li>
<li><a href="#sec-6">yasnippet and auto-insert</a></li>
<li><a href="#sec-7">hippie-expand</a></li>
<li><a href="#sec-8">Iedit</a></li>
<li><a href="#sec-9">bm.el</a></li>
<li><a href="#sec-10">Helm</a></li>
<li><a href="#sec-11">Helm Imenu</a></li>
<li><a href="#sec-12">Helm-occur</a></li>
<li><a href="#sec-13">helm-grep and Emacs-wgrep</a></li>
<li><a href="#sec-14">helm-ls-git helm-ls-hg</a></li>
<li><a href="#sec-15">helm-etags-plus ctags-update.el</a></li>
<li><a href="#sec-16">emacs-helm-gtags</a></li>
<li><a href="#sec-17">eshell</a></li>
<li><a href="#sec-18">ace-jump-mode</a></li>
<li><a href="#sec-19">sqlparser</a></li>
<li><a href="#sec-20">golden-ratio.el</a></li>
<li><a href="#sec-21">dired</a></li>
<li><a href="#sec-22">VC (version control) emacs自带的用于进行svn git cvs hg 等各种版本管理工具的一个统一的接口</a></li>
<li><a href="#sec-23">Ediff</a></li>
<li><a href="#sec-24">magit</a></li>
<li><a href="#sec-25">org-mode</a></li>
<li><a href="#sec-26">org-agenda org-mode TODO list</a></li>
<li><a href="#sec-27">mail</a></li>
<li><a href="#sec-28">calc emacs里的计算器</a></li>
<li><a href="#sec-29">Emacs 一些可以提高效率的小tips</a></li>
</ul>
</div>
</div>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Tips: dropbox 里的视频不要用迅雷下载， 似乎下不了(PS. 似乎国内现在封了dropbox，试从微盘vdist.weibo.com下载相应的视频链接)</h2>
<div class="outline-text-2" id="text-1">
<p>
微盘里也上传一份供下载<br  />
<a href="http://vdisk.weibo.com/s/A2UdJFfhA_GG5/1412260686">http://vdisk.weibo.com/s/A2UdJFfhA_GG5/1412260686</a><br  />
优酷上也上传了一些，供在线观看(清晰度相对差些）<br  />
<a href="http://i.youku.com/u/UMjU4NzMzNDA=/videos">http://i.youku.com/u/UMjU4NzMzNDA=/videos</a><br  />
</p>
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">AutoComplete</h2>
<div class="outline-text-2" id="text-2">
<p>
<a href="http://www.emacswiki.org/emacs/AutoComplete">http://www.emacswiki.org/emacs/AutoComplete</a><br  />
Video Demo:<br  />
<a href="http://v.youku.com/v_show/id_XMzMxMDg0NDIw.html">http://v.youku.com/v_show/id_XMzMxMDg0NDIw.html</a><br  />
<a href="http://youtu.be/rGVVnDxwJYE">http://youtu.be/rGVVnDxwJYE</a><br  />
<a href="http://cx4a.org/software/auto-complete/demo.html">http://cx4a.org/software/auto-complete/demo.html</a><br  />
</p>
</div>
</div>
<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">AutoJavaComplete</h2>
<div class="outline-text-2" id="text-3">
<p>
AutoComplete 的一个插件，基于TAG 用于java补全<br  />
虽然比Eclipse差些， 但总还可以用，再加上emacs 其他一些补全机制<br  />
足可以用<br  />
<a href="https://github.com/emacs-java/auto-java-complete">https://github.com/emacs-java/auto-java-complete</a><br  />
Video Demo:<br  />
<a href="https://www.dropbox.com/s/f8dr9utzhh0usay/auto-java-complete.mp4.7z">https://www.dropbox.com/s/f8dr9utzhh0usay/auto-java-complete.mp4.7z</a><br  />
或<br  />
<a href="http://vdisk.weibo.com/s/A2UdJFfhA_GG9">http://vdisk.weibo.com/s/A2UdJFfhA_GG9</a><br  />
</p>
</div>
</div>
<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">auto-complete-clang</h2>
<div class="outline-text-2" id="text-4">
<p>
AutoComplete 用于c c++ 补全的插件<br  />
Video Demo:<br  />
<a href="https://www.dropbox.com/s/ks3wylqijyapyky/autocomplete-clang.mp4.7z">https://www.dropbox.com/s/ks3wylqijyapyky/autocomplete-clang.mp4.7z</a><br  />
或<br  />
<a href="http://vdisk.weibo.com/s/A2UdJFfhA_GFI">http://vdisk.weibo.com/s/A2UdJFfhA_GFI</a><br  />
</p>
</div>
</div>
<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5">yasnippet  模版</h2>
<div class="outline-text-2" id="text-5">
<p>
<a href="https://github.com/capitaomorte/yasnippet">https://github.com/capitaomorte/yasnippet</a><br  />
Video Demo:<br  />
<a href="http://v.youku.com/v_show/id_XMzI0NDYxNDQ=.html">http://v.youku.com/v_show/id_XMzI0NDYxNDQ=.html</a><br  />
<a href="http://youtu.be/ZCGmZK4V7Sg">http://youtu.be/ZCGmZK4V7Sg</a><br  />
<a href="http://yasnippet.googlecode.com/files/yas_demo.avi">http://yasnippet.googlecode.com/files/yas_demo.avi</a><br  />
</p>
</div>
</div>
<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6">yasnippet and auto-insert</h2>
<div class="outline-text-2" id="text-6">
<p>
yasnippet 与auto-insert 结合，  将新创建文件时自动在文件里插入一定的模版<br  />
Video Demo:<br  />
<a href="https://www.dropbox.com/s/47d4ujlqao0j6ou/yasnippet-auto-insert.mkv.7z">https://www.dropbox.com/s/47d4ujlqao0j6ou/yasnippet-auto-insert.mkv.7z</a><br  />
或<br  />
<a href="http://vdisk.weibo.com/s/A2UdJFfhA_GFF">http://vdisk.weibo.com/s/A2UdJFfhA_GFF</a><br  />
</p>
</div>
</div>
<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7">hippie-expand</h2>
<div class="outline-text-2" id="text-7">
<p>
emacs 自带的一种补全机制，可以补全 变量名（当从前打开的buffer,所有打开的<br  />
buffer,剪切板),可以补全文件名<br  />
Video Demo:<br  />
<a href="https://www.dropbox.com/s/ltheog1cp6quciv/hippie-expand.mkv.7z">https://www.dropbox.com/s/ltheog1cp6quciv/hippie-expand.mkv.7z</a><br  />
或<br  />
<a href="http://vdisk.weibo.com/s/A2UdJFfhA_GFM">http://vdisk.weibo.com/s/A2UdJFfhA_GFM</a><br  />
</p>
</div>
</div>
<div id="outline-container-sec-8" class="outline-2">
<h2 id="sec-8">Iedit</h2>
<div class="outline-text-2" id="text-8">
<p>
显示光标下匹配的word或变量<br  />
同步的更改光标下匹配的word或变量<br  />
Video Demo:<br  />
<a href="https://www.dropbox.com/s/px380psaksx8277/iedit.mkv.7z">https://www.dropbox.com/s/px380psaksx8277/iedit.mkv.7z</a><br  />
或 <a href="http://vdisk.weibo.com/s/A2UdJFfhA_GFq">http://vdisk.weibo.com/s/A2UdJFfhA_GFq</a><br  />
演示视频里演示了 如何同时更改本文件里所有hello变量为hello另一个变量<br  />
及如何只同时更改test()方法里的hello变量为另一个变量的功能(其他区域的hello不受<br  />
影响）<br  />
其中主要功能为Iedit实现<br  />
其中只修改test()函数里的hello变量  使用了emacs 自带的 narrow功能（C-xnn)即只显<br  />
示选中的部分的文字，隐藏未选中部分<br  />
</p>
</div>
</div>
<div id="outline-container-sec-9" class="outline-2">
<h2 id="sec-9">bm.el</h2>
<div class="outline-text-2" id="text-9">
<p>
可视化 书签,在书签间快速跳转<br  />
Video Demo:<br  />
<a href="https://www.dropbox.com/s/z2dqtwq05so4u02/bm-bookmark.mkv.7z">https://www.dropbox.com/s/z2dqtwq05so4u02/bm-bookmark.mkv.7z</a><br  />
或<a href="http://vdisk.weibo.com/s/A2UdJFfhA_GFr">http://vdisk.weibo.com/s/A2UdJFfhA_GFr</a><br  />
演示视频展示了  在当前buffer(文件）的三个位置设置书签 ，然后在各个书签间来回跳<br  />
转的功能， （跳转过去后 会自动把当前行所在位置停留在窗口中间)<br  />
当然书签也可以在不同的文件上设置 ，在不同文件间跳转<br  />
</p>
</div>
</div>

<div id="outline-container-sec-10" class="outline-2">
<h2 id="sec-10">Helm</h2>
<div class="outline-text-2" id="text-10">
<p>
Helm 的功能很多， 主要实现了通过一个或多个关键字从各种侯选项（可以是buffer,文<br  />
件，剪切环里的内容,最近打开的文件等）中过滤出某几个，<br  />
然后执行相应的操作(如 切换到某个buffer ,打开某个文件，将选中的剪切板里的内容插<br  />
入到光标处等）<br  />
Video Demo:<br  />
<a href="https://www.dropbox.com/s/45lu4bvrd1zxusx/helm.mkv.7z">https://www.dropbox.com/s/45lu4bvrd1zxusx/helm.mkv.7z</a><br  />
或<a href="http://vdisk.weibo.com/s/A2UdJFfhA_GFB">http://vdisk.weibo.com/s/A2UdJFfhA_GFB</a><br  />
</p>
<ol class="org-ol">
<li>视频展示了 如何快速的切换到某个文件（从 所有Buffers(打开的文件） Recentf(最近<br  />
</li>
</ol>
<p>
打开过的文件）<br  />
</p>
<ol class="org-ol">
<li>Kill Ring 是emacs 的剪切版，  所有剪切版上出现的内容会列出来让你从中选择<br  />
视频中有展示 如何将剪切版中的内容插入到当前位置<br  />
</li>
</ol>
</div>
</div>

<div id="outline-container-sec-11" class="outline-2">
<h2 id="sec-11">Helm Imenu</h2>
<div class="outline-text-2" id="text-11">
<p>
列出当前所编辑文件中各个函数/变量 并跳转<br  />
以emacs源码中的sha256.c(c语言） 及 helm-imenu.el（emacs lisp语言)文件为例<br  />
Video Demo:<br  />
<a href="https://www.dropbox.com/s/zq6zk562nmgypve/helm-imenu.mkv.7z">https://www.dropbox.com/s/zq6zk562nmgypve/helm-imenu.mkv.7z</a><br  />
或<a href="http://vdisk.weibo.com/s/A2UdJFfhA_GG3">http://vdisk.weibo.com/s/A2UdJFfhA_GG3</a><br  />
</p>
</div>
</div>
<div id="outline-container-sec-12" class="outline-2">
<h2 id="sec-12">Helm-occur</h2>
<div class="outline-text-2" id="text-12">
<p>
根据关键字列出当前文件中包含关键字的行， 并跳转<br  />
Video Demo:<br  />
<a href="https://www.dropbox.com/s/9krjogmt9ssk8bm/helm-occur.mkv.7z">https://www.dropbox.com/s/9krjogmt9ssk8bm/helm-occur.mkv.7z</a><br  />
或<a href="http://vdisk.weibo.com/s/A2UdJFfhA_GFO">http://vdisk.weibo.com/s/A2UdJFfhA_GFO</a><br  />
</p>
</div>
</div>

<div id="outline-container-sec-13" class="outline-2">
<h2 id="sec-13">helm-grep and Emacs-wgrep</h2>
<div class="outline-text-2" id="text-13">
<p>
helm-grep.el<br  />
grep 的helm 版， 根据关键字过滤某个文件（如果是一个文件，可以直接用helm-occur)<br  />
  或多个文件，<br  />
  或某个目录<br  />
  或某个目录（包括子目录）<br  />
  并跳转到指定的行<br  />
  (可以是交互式的,即每输入一个字母，过滤后的结果就跟着变化）<br  />
  （也可以将过滤后的结果保存到一个buffer中， 然后在这个buffer中的某一行回车后<br  />
  就跳转到相应的行）<br  />
  同时有了Emacs-wgrep ,则对上述buffer 内容的更改 则会反映到这些文件中，以实现<br  />
  在多个文件中更改某个变量的目录<br  />
  Video Demo:<br  />
  <a href="https://www.dropbox.com/s/jvju9gwyctwxg6a/helm-grep-wgrep.mkv.7z">https://www.dropbox.com/s/jvju9gwyctwxg6a/helm-grep-wgrep.mkv.7z</a><br  />
</p>
<ol class="org-ol">
<li>视频中展示了以"joseph"为关键字搜索某目录下的文件，并快速跳转到指定行的操作<br  />
</li>
<li>将上述过滤的结果保存到一个临时buffer中，在这个临时buffer中的任意一行回车即<br  />
</li>
</ol>
<p>
可跳转到指定文件位置 ,在这个buffer中修改其中的内容 ，其相应的文件内容也会跟<br  />
着修改 ,结合前面的Iedit功能 ，则可以实现同时修改这些文件的文件，比如将所有关<br  />
键字"joseph" 替换成"joseph-new"，<br  />
</p>
</div>
</div>


<div id="outline-container-sec-14" class="outline-2">
<h2 id="sec-14">helm-ls-git helm-ls-hg</h2>
<div class="outline-text-2" id="text-14">
<p>
列出git 或hg 仓库里的文件， 从中过滤中某个文件 打开<br  />
快速打开项目中文件的一种方法<br  />
以 helm-ls-git 为例<br  />
<a href="https://www.dropbox.com/s/6kpqsvxh4d59ojl/helm-ls-git.mkv.7z">https://www.dropbox.com/s/6kpqsvxh4d59ojl/helm-ls-git.mkv.7z</a><br  />
或<a href="http://vdisk.weibo.com/s/A2UdJFfhA_GFP">http://vdisk.weibo.com/s/A2UdJFfhA_GFP</a><br  />
</p>
</div>
</div>
<div id="outline-container-sec-15" class="outline-2">
<h2 id="sec-15">helm-etags-plus ctags-update.el</h2>
<div class="outline-text-2" id="text-15">
<p>
使用Exuberant Ctags(ctags) 实现函数的跳转（支持c c++ java等多种语言）<br  />
helm-etags-plus 支持多个TAGS文件，<br  />
ctags-update.el 则可以自动更新TAGS文件，<br  />
以emacs 的源代码为例演示如何使用<br  />
Video Demo:<br  />
<a href="https://www.dropbox.com/s/xroh50ptv5iuw4x/helm-etags-plus.mp4.7z">https://www.dropbox.com/s/xroh50ptv5iuw4x/helm-etags-plus.mp4.7z</a><br  />
或<br  />
<a href="http://vdisk.weibo.com/s/A2UdJFfhA_GFA">http://vdisk.weibo.com/s/A2UdJFfhA_GFA</a><br  />
视频主要展示了函数间的跳转功能，当发现有多个同名函数/变量时 会列出所有所项供<br  />
你选择 ，加上helm 关键字过滤的功能， 可以很容易的跳转到目标函数上，<br  />
虽然比不上eclipse VS 等IDE跳转的那么精确， 但已经足够用了<br  />
ctags etags global 这些工具并不完善， 但emacs 对其进行包装后， 基本可以实现<br  />
快速跳转的功能<br  />
</p>
</div>
</div>
<div id="outline-container-sec-16" class="outline-2">
<h2 id="sec-16">emacs-helm-gtags</h2>
<div class="outline-text-2" id="text-16">
<p>
GNU Global with helm for emacs<br  />
使用 GNU Global 来实现函数的跳转，查找哪些地方调用了某函数等功能<br  />
Video Demo:<br  />
<a href="https://www.dropbox.com/s/duuapzy1tuivqas/emacs-helm-gtags.mkv.7z">https://www.dropbox.com/s/duuapzy1tuivqas/emacs-helm-gtags.mkv.7z</a><br  />
或<br  />
<a href="http://vdisk.weibo.com/s/A2UdJFfhA_GFt">http://vdisk.weibo.com/s/A2UdJFfhA_GFt</a><br  />
同helm-etags-plus 功能类似<br  />
只是其依赖的是GNU Global 而非ctags etags 而已<br  />
</p>
</div>
</div>

<div id="outline-container-sec-17" class="outline-2">
<h2 id="sec-17">eshell</h2>
<div class="outline-text-2" id="text-17">
<p>
emacs 实现的一个shell ,<br  />
可以在编辑文件时快速的跳到此文件所在的目录 ，然后执行相应的shell命令<br  />
可以利用到emacs自身的补全机会，<br  />
Video Demo:<br  />
<a href="https://www.dropbox.com/s/pc3shb7resaz9k1/eshell.mp4.7z">https://www.dropbox.com/s/pc3shb7resaz9k1/eshell.mp4.7z</a><br  />
或<br  />
<a href="http://vdisk.weibo.com/s/A2UdJFfhA_GFl">http://vdisk.weibo.com/s/A2UdJFfhA_GFl</a><br  />
</p>
</div>
</div>
<div id="outline-container-sec-18" class="outline-2">
<h2 id="sec-18">ace-jump-mode</h2>
<div class="outline-text-2" id="text-18">
<p>
无笔标快速定位的方法之一：<br  />
比如 :按下M-m（Alt-m)之后,<br  />
等侯你按下一个字母(比如m),然后它会用另外一组红色face的字母 标出<br  />
所有以此字母(m)开头的单词,可以多次操作,直到光标定位到你想要的位置<br  />
下面以 快速跳转到各个字母m处进行演示(注意窗口最下面提示我输入一个字母<br  />
Video Demo:<br  />
<a href="https://www.dropbox.com/s/mgsmfhsdpzgcw9v/ace-jump-mode.mp4.7z">https://www.dropbox.com/s/mgsmfhsdpzgcw9v/ace-jump-mode.mp4.7z</a><br  />
或<br  />
<a href="http://vdisk.weibo.com/s/A2UdJFfhA_GFN">http://vdisk.weibo.com/s/A2UdJFfhA_GFN</a><br  />
</p>
</div>
</div>
<div id="outline-container-sec-19" class="outline-2">
<h2 id="sec-19">sqlparser</h2>
<div class="outline-text-2" id="text-19">
<p>
支持mysql oracle sqlserver<br  />
主要实现编写sql语句时可以实时的从数据据中查询相应的信息 ，帮助编写sql语句，<br  />
比如 进行补全 表名 列名等<br  />
以mysql 为例<br  />
<a href="https://www.dropbox.com/s/voo5zxcijq2hk93/sqlparser-mysql-complete.mp4.7z">https://www.dropbox.com/s/voo5zxcijq2hk93/sqlparser-mysql-complete.mp4.7z</a><br  />
或<br  />
<a href="http://vdisk.weibo.com/s/A2UdJFfhA_GGh">http://vdisk.weibo.com/s/A2UdJFfhA_GGh</a><br  />
</p>
</div>
</div>
<div id="outline-container-sec-20" class="outline-2">
<h2 id="sec-20">golden-ratio.el</h2>
<div class="outline-text-2" id="text-20">
<p>
多窗口操作时 ，比较烦人的一件事情就是调整窗口的大小<br  />
golden-ratio.el 则按照黄金分隔（0.618）的比例自动调整窗口的大小<br  />
使光标所在的窗口无论是水平还是竖直方向都占整个比例的0.618，<br  />
<a href="https://www.dropbox.com/s/vozuebnknsxjjj5/golden-ratio-el.mp4.7z">https://www.dropbox.com/s/vozuebnknsxjjj5/golden-ratio-el.mp4.7z</a><br  />
或<a href="http://vdisk.weibo.com/s/A2UdJFfhA_GFn">http://vdisk.weibo.com/s/A2UdJFfhA_GFn</a><br  />
</p>
</div>
</div>
<div id="outline-container-sec-21" class="outline-2">
<h2 id="sec-21">dired</h2>
<div class="outline-text-2" id="text-21">
<p>
emacs 管理文件的方式，<br  />
1.在这里更改文件名字就行更改一个文件的内容一样，<br  />
2.删除文件<br  />
3.快速当前目录想要的文件（只显示匹配的文件）<br  />
Video Demo:<br  />
<a href="https://www.dropbox.com/s/gs4zncq9idnecnp/dired.mp4.7z">https://www.dropbox.com/s/gs4zncq9idnecnp/dired.mp4.7z</a><br  />
或<a href="http://vdisk.weibo.com/s/A2UdJFfhA_GFU">http://vdisk.weibo.com/s/A2UdJFfhA_GFU</a><br  />
</p>
</div>
</div>

<div id="outline-container-sec-22" class="outline-2">
<h2 id="sec-22">VC (version control) emacs自带的用于进行svn git cvs hg 等各种版本管理工具的一个统一的接口</h2>
<div class="outline-text-2" id="text-22">
<p>
Video Demo:<br  />
<a href="https://www.dropbox.com/s/rw53o0ee6eoiwap/vc.mp4.7z">https://www.dropbox.com/s/rw53o0ee6eoiwap/vc.mp4.7z</a><br  />
或<a href="http://vdisk.weibo.com/s/A2UdJFfhA_GFQ">http://vdisk.weibo.com/s/A2UdJFfhA_GFQ</a><br  />
C-x v v     vc-next-action &#x2013; perform the next logical control operation on file 会根据当前文件状态决定该做什么<br  />
  1.如果当前的文件(work file)不在任何一个version control 管理下,则询问你创建什么样的仓库,如svn git等.<br  />
  2.如果在管理下,则register the file. 即git add filename.<br  />
  3.如果work file 与库中的文件一样,do nothing.<br  />
  4.如果你对work file 进行的修改则进行checkin(即commit)操作,它会打开一个*VC-LOG*buffer让你输入日志,关于*VC-LOG* 见下面的注释<br  />
C-x v =     vc-diff &#x2013; diff with other revisions<br  />
  对未提交的文件与最新的版本对应的文件进行diff操作,C-u可以选择用哪两个版本,不仅可以单文件diff,<br  />
  可以是fileset,如何对多文件进行操作看vc-dir mode `C-xvd' 类似于dired, ibuffer.<br  />
C-x v u     vc-revert-buffer &#x2013; undo checkout  放弃对文件的修改,即重新update 一下.<br  />
  查看日志 `*vc-change-log*' buffer<br  />
C-x v l     vc-print-log &#x2013; show log (not in ChangeLog format) 显示日志,只显示当前文件有关的日志<br  />
    这个打开的日志buffer 功能绝对不止显示日志这么简单，<br  />
    你可以按下C-hb 查看一下它的键绑定，<br  />
    比如= 是进行diff比较，默认是最新的版本，与你光标下的版本进行比较<br  />
    也可以用m ,mark 两个版本后，然后= ,将其进行比较<br  />
C-x v L     `vc-print-root-log' 显示日志,显示所有日志<br  />
    在*VC-change-log*buffer 中可以进行以下操作<br  />
</p>
</div>
</div>

<div id="outline-container-sec-23" class="outline-2">
<h2 id="sec-23">Ediff</h2>
<div class="outline-text-2" id="text-23">
<p>
ediff 在VC 那一节里有演示， 通常情况下， ediff 会与版本管理控制一起使用，<br  />
可以对同一个文件两个不同版本进行比较 ，也可以在出现冲突的时候用于解决冲突<br  />
这里就演示一下 what-emacs-can-do.org 这个文件各个版本之间用ediff 进行比较<br  />
Video Demo:<br  />
<a href="https://www.dropbox.com/s/l9sxfvuhe6t6zos/ediff.mp4.7z">https://www.dropbox.com/s/l9sxfvuhe6t6zos/ediff.mp4.7z</a><br  />
或<a href="http://vdisk.weibo.com/s/A2UdJFfhA_GG2">http://vdisk.weibo.com/s/A2UdJFfhA_GG2</a><br  />
</p>
</div>
</div>
<div id="outline-container-sec-24" class="outline-2">
<h2 id="sec-24">magit</h2>
<div class="outline-text-2" id="text-24">
<p>
magit 是emacs专门针对git的一个版本控制插件<br  />
<a href="https://github.com/magit/magit">https://github.com/magit/magit</a><br  />
<a href="https://github.com/magit/magit/wiki">https://github.com/magit/magit/wiki</a><br  />
Video demo:<br  />
<a href="http://v.youku.com/v_show/id_XNzk1NjI5OTM2.html">http://v.youku.com/v_show/id_XNzk1NjI5OTM2.html</a><br  />
<a href="http://vimeo.com/2871241">http://vimeo.com/2871241</a><br  />
<a href="http://shelby.tv/video/vimeo/2871241/meet-magit">http://shelby.tv/video/vimeo/2871241/meet-magit</a><br  />
</p>
</div>
</div>
<div id="outline-container-sec-25" class="outline-2">
<h2 id="sec-25">org-mode</h2>
<div class="outline-text-2" id="text-25">
<p>
当前文件就是用org-mode 进行编辑的，<br  />
用Tab 键进行展开或折叠,<br  />
可以将org file 导出成html<br  />
</p>
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">tab</td>
<td class="left">col2</td>
</tr>

<tr>
<td class="left">hello this is a tab</td>
<td class="left">another line</td>
</tr>

<tr>
<td class="left">eeee</td>
<td class="left">fff</td>
</tr>
</tbody>
</table>
<p>
<a href="http://orgmode.org/worg/org-tutorials/index.html">http://orgmode.org/worg/org-tutorials/index.html</a><br  />
</p>

<p>
<a href="http://vdisk.weibo.com/s/A2UdJFfhA_GFx">http://vdisk.weibo.com/s/A2UdJFfhA_GFx</a><br  />
或者<br  />
<a href="https://www.dropbox.com/s/4iew0stcupnevk9/org-mode.mp4.7z">https://www.dropbox.com/s/4iew0stcupnevk9/org-mode.mp4.7z</a><br  />
</p>
</div>
</div>

<div id="outline-container-sec-26" class="outline-2">
<h2 id="sec-26">org-agenda org-mode TODO list</h2>
<div class="outline-text-2" id="text-26">
<p>
org mode 用于日程管理<br  />
(global-set-key (kbd "C-c a")  'org-agenda)<br  />
(define-key global-map [(control meta ?r)] 'org-capture)<br  />
比如C-cat 列出所有todo list<br  />
Control+Alt+r 添加一条新的todo<br  />
<a href="https://www.dropbox.com/s/wfpvt4ydhi56w57/org-mode-todolist.mp4.7z">https://www.dropbox.com/s/wfpvt4ydhi56w57/org-mode-todolist.mp4.7z</a><br  />
或者<br  />
<a href="http://vdisk.weibo.com/s/A2UdJFfhA_GFR">http://vdisk.weibo.com/s/A2UdJFfhA_GFR</a><br  />
</p>
</div>
</div>
<div id="outline-container-sec-27" class="outline-2">
<h2 id="sec-27">mail</h2>
<div class="outline-text-2" id="text-27">
<p>
使用 mew 发邮件<br  />
<a href="https://www.dropbox.com/s/37n7jv55yvzomot/emacs-mew-send-mail.mp4.7z">https://www.dropbox.com/s/37n7jv55yvzomot/emacs-mew-send-mail.mp4.7z</a><br  />
或者<a href="http://vdisk.weibo.com/s/A2UdJFfhA_GFs">http://vdisk.weibo.com/s/A2UdJFfhA_GFs</a><br  />
</p>
</div>
</div>
<div id="outline-container-sec-28" class="outline-2">
<h2 id="sec-28">calc emacs里的计算器</h2>
<div class="outline-text-2" id="text-28">
<p>
<a href="https://www.dropbox.com/s/2xb0lorud0hypvs/emacs-calc.mp4.7z">https://www.dropbox.com/s/2xb0lorud0hypvs/emacs-calc.mp4.7z</a><br  />
或者<br  />
<a href="http://vdisk.weibo.com/s/A2UdJFfhA_GFX">http://vdisk.weibo.com/s/A2UdJFfhA_GFX</a><br  />
可以用calc 的功能<br  />
如计算1+2 : 1 enter 2 enter +,即先输入数，再输入运算符，+-*/^<br  />
d2 将当前int 转为二进制<br  />
d6 转为16进制<br  />
d8 转为8进制<br  />
d0 转为十进制<br  />
当我们只是想简单的对一系列数字进行代数运算时，使用逆波兰表达式不是很直观，因此， calc 提供了一个更加直接的指令：<br  />
' （就是分号旁边的那个按键）<br  />
比如，在 calc 中按“'”，然后输入算式：<br  />
(3^2 + 4^2) ^ 0.5<br  />
</p>

<p>
二进制数的输入方法<br  />
2#01010101<br  />
8#131324123<br  />
</p>

<p>
另外，与二进制处理相关的函数绑定在以b开头的键上<br  />
如bL,br 左移右移<br  />
ba bo bn  ,and or not<br  />
</p>
</div>
</div>
<div id="outline-container-sec-29" class="outline-2">
<h2 id="sec-29">Emacs 一些可以提高效率的小tips</h2>
<div class="outline-text-2" id="text-29">
<p>
<a href="http://v.youku.com/v_show/id_XNzk1ODA5OTY4.html">http://v.youku.com/v_show/id_XNzk1ODA5OTY4.html</a><br  />
<a href="http://vdisk.weibo.com/s/A2UdJFfhA_iOO">http://vdisk.weibo.com/s/A2UdJFfhA_iOO</a><br  />
</p>
<ol class="org-ol">
<li>我的快捷键 M-w 快速选中当前行(选中后minibuffer 会有已选中的提示)<br  />
M-w 复制一个区域，但是如果没有区域被选中，则复制当前行<br  />
</li>
<li>一键删除光标后面的内容C-k<br  />
</li>
<li>快速选中函数 ,C-g 取消选中后 光标仍然回到未选中前的位置<br  />
与功能1相结合 即复制整个函数， 与功能2相结合 即删除整个函数<br  />
</li>
<li>在下一行插入一空行， 在上一行插入一空行，光标并移动到空行上<br  />
</li>
<li>快速跳转到行首（C-a)  行尾(C-e),<br  />
当行首有空格时C-a跳到行首 ，当已经在行首 再次按下C-a  则跳转到本行第一个非<br  />
空字符处，多次C-a 在这两个位置来回跳转<br  />
与 功能2相结合 C-a C-k两键即可删除整行内容<br  />
</li>
</ol>
</div>
</div>

</div>
</div>]]></description>
      <pubDate>2017-01-22</pubDate>
      <guid>http://jixiuf.github.io/blog/what-emacs-can-do.html</guid>
    </item>
    <item>
      <title>网上即时聊天原理(mochiweb+jquery实现)</title>
      <link>http://jixiuf.github.io/blog/mochiweb_comet_chat.html</link>
      <description><![CDATA[<div>
<div class="post">
<h1>网上即时聊天原理(mochiweb+jquery实现)</h1>
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. 代码 位置</a></li>
<li><a href="#sec-2">2. 操作:</a></li>
<li><a href="#sec-3">3. Comet</a></li>
<li><a href="#sec-4">4. 代码讲解</a></li>
</ul>
</div>
</div>
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> 代码 位置</h2>
<div class="outline-text-2" id="text-1">
<p>
<a href="https://github.com/jixiuf/helloerlang/tree/master/mochiweb_comet_chat">https://github.com/jixiuf/helloerlang/tree/master/mochiweb_comet_chat</a>
</p>
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> 操作:</h2>
<div class="outline-text-2" id="text-2">
<p>
分别打开两个网页，然后，对textfield中输入内容，在另一个网页中会即时显现.
</p>
</div>
</div>
<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> Comet</h2>
<div class="outline-text-2" id="text-3">
<p>
Comet 是一项很时髦的技术。其目的很简单：由于历史原因，目前 HTTP 协议信息都是客
户端向服务器要（Poll），服务器没有办法推送信息给客户端（Sever Push）。这在实现
某些应用的时候就会遇到麻烦。例如：
</p>
<ul class="org-ul">
<li>当邮件服务器收到新的邮件时，及时报告给用户，如果他在线的话（GMail 这样做了）
</li>
<li>当 Web Chat 服务器收到新的信息时，及时发送信息到相应的在线用户（Web Chat 的基本需求）。
</li>
<li>聊天时提示你对方正在输入（时下 IM 客户端很时髦的一个功能）。
</li>
</ul>

<p>
Comet 技术对服务端的要求还是很高的，Long Polling减少了网络流量，但是服务端的连
接数并没有减少。因此基于 Comet 的应用，很容易在 Scale（伸缩性）上出现问题。使用
Erlang + MochiWeb，还是很好的利用了 Erlang 可以轻松建立大量连接这个特性。需要指
出的是，很可能 Comet 应用的时髦，将会很大程度上促进了业界对 Erlang 的关注。
</p>
</div>
</div>
<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> 代码讲解</h2>
<div class="outline-text-2" id="text-4">
<p>
index.html
</p>
<div class="org-src-container">

<pre class="src src-javascript"><span style="color: #FBDE2D;">function</span> <span style="color: #FF6400;">get</span>(){
        $.ajax({
            type: <span style="color: #ffa07a;">"GET"</span>,
            url: <span style="color: #ffa07a;">"chat"</span>,
            cache:<span style="color: #D8FA3C;">false</span>,
            success:getMsg
          });
}
<span style="color: #FBDE2D;">function</span> <span style="color: #FF6400;">getMsg</span>(<span style="color: #40E0D0;">data</span>){
    $(<span style="color: #ffa07a;">"#history"</span>).append(<span style="color: #FBDE2D;">new</span> <span style="color: #8DA6CE;">Date</span>().toLocaleString()+<span style="color: #ffa07a;">":"</span>+data+<span style="color: #ffa07a;">"&lt;br/&gt;"</span>);
    get();
}
</pre>
</div>
<p>
在index.html 加载完比后，会先调用一次:
</p>
<div class="org-src-container">

<pre class="src src-javascript">get();
</pre>
</div>
<p>
上面的函数是以GET方式向服务器端发起请求的代码，可以看出，在回调方法中，再次调
用get() 方法，向服务器端发起请求。这跟那种每隔一定时间向服务器端请求一次看有
没有新的消息的方式完全不一样。
因为这种以GET方式发起的请求，在服务器端是阻塞的，即由服务器端来控制 ，如果没
有新的消息就不返回（达到超时时间除外（代码中设为20s））。
</p>

<div class="org-src-container">

<pre class="src src-javascript">$(<span style="color: #ffa07a;">'#send'</span>).click(
    <span style="color: #FBDE2D;">function</span>(){
        $.ajax({
            type: <span style="color: #ffa07a;">"POST"</span>,
            url: <span style="color: #ffa07a;">"chat"</span>,
            cache:<span style="color: #D8FA3C;">false</span>,
            data: <span style="color: #ffa07a;">"message="</span>+$(<span style="color: #ffa07a;">"#message"</span>).val(),
            <span style="color: #FF6400;">success</span>: <span style="color: #FBDE2D;">function</span>(<span style="color: #40E0D0;">msg</span>){
                $(<span style="color: #ffa07a;">"#status"</span>).empty(); <span style="color: #AEAEAE;">// </span><span style="color: #AEAEAE;">remove children</span>
                $(<span style="color: #ffa07a;">"#status"</span>).append(<span style="color: #FBDE2D;">new</span> <span style="color: #8DA6CE;">Date</span>().toLocaleString()+<span style="color: #ffa07a;">":"</span>+msg); <span style="color: #AEAEAE;">// </span><span style="color: #AEAEAE;">add child</span>
            }
        });
    }
);
});
</pre>
</div>
<p>
点击发送按钮的时候，会以POST方式,向服务器发送一条消息，
服务器在接到这条消息后,会进行如下处理:
</p>
<div class="org-src-container">

<pre class="src src-erlang">Data = Req:parse_post(),
Room = get_the_room(),
% post
io:format("message from post:~p~n",[proplists:get_value("message", Data)]) ,
Room ! {self(), post, list_to_binary(proplists:get_value("message", Data))},
</pre>
</div>
<p>
某进程接到上面发送的消息会，会查看room 中有哪些用户在等待，
然后一一取出，将上面接收到的那条信息分别发送给他们 ，然后清空等待队列
那些以GET方式请求的客户端到此时才返回（如果没有超时的话。）
</p>
<div class="org-src-container">

<pre class="src src-erlang">{From, post, Message} -&gt;
    From ! posted,
    lists:foreach(fun(User) -&gt;
					% broadcast the message
			  User ! Message
		  end, Users),
    %% room(Users),
    %% 所有等待的用户都会接收的消息，
    %% 从队列中去掉他们
    room([]),
    io:format("~n",[]) ;
%% room([]);
</pre>
</div>
</div>
</div>

</div>
</div>]]></description>
      <pubDate>2017-01-22</pubDate>
      <guid>http://jixiuf.github.io/blog/mochiweb_comet_chat.html</guid>
    </item>
    <item>
      <title>mochiweb 的使用 及 可开tcp连接数的(http长连接) 测试</title>
      <link>http://jixiuf.github.io/blog/mochiweb_http_load.html</link>
      <description><![CDATA[<div>
<div class="post">
<h1>mochiweb 的使用 及 可开tcp连接数的(http长连接) 测试</h1>
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. 测试代码位置</a></li>
<li><a href="#sec-2">2. mochiweb 的使用</a></li>
<li><a href="#sec-3">3. 可开tcp连接数的(http长连接) 测试</a></li>
</ul>
</div>
</div>
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> 测试代码位置</h2>
<div class="outline-text-2" id="text-1">
<p>
<a href="https://github.com/jixiuf/helloerlang/tree/master/mochiweb_test">https://github.com/jixiuf/helloerlang/tree/master/mochiweb_test</a>
</p>
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> mochiweb 的使用</h2>
<div class="outline-text-2" id="text-2">
<ol class="org-ol">
<li>先得到源码
<div class="org-src-container">

<pre class="src src-sh">git clone git://github.com/mochi/mochiweb.git
</pre>
</div>
</li>
<li>在根目录下make 进行编译
</li>
<li><div class="org-src-container">

<pre class="src src-sh">make app <span style="color: #40E0D0;">PROJECT</span>=mochiweb_test
</pre>
</div>
<p>
然后在mochiweb 同级目录下会生成mochiweb<sub>test目录</sub>
在这个目录下，运行make
对这个项目进行一定的准备工作，比如得到它depend 的项目mochiweb(会上网继续下载mochiweb)
启动mochiweb ,
</p>
<div class="org-src-container">

<pre class="src src-sh">./start-dev.sh
</pre>
</div>
<p>
然后在浏览器里访问<a href="http://localhost:8080/">http://localhost:8080/</a>
</p>
</li>
</ol>
<p>
mochiweb<sub>test</sub><sub>web</sub>.erl 模块是处理具体业务 的模块。
比如:
</p>
<div class="org-src-container">

<pre class="src src-erlang">....
		case Path of
		    "time" -&gt;%% 新增了 /timer 这个 URL，它是一个 HTTP Chunked 的例子
		    Response = Req:ok({"text/plain", chunked}),
		    time(Response);
		    _ -&gt;
			Req:serve_file(Path, DocRoot)
		end;
...


%% 打印当前时间，间隔一秒，再在已经打开的 http 连接之上，再次打印，这也就是所谓 HTTP长连接/ServerPush 的一种
time(Resp)-&gt;
    Resp:write_chunk(io_lib:format("The time is: ~p~n",
				   [calendar:local_time()])),
    timer:sleep(1000),
    time(Resp)        .
</pre>
</div>
<p>
  当访问<a href="http://localhost:8080/time">http://localhost:8080/time</a> 时,调用 time(Resp )方法进行处理,变是一种长
  连接
在对 src/目录下的erl 文件进行编辑后，运行make 命令，在
        ./start-dev.sh启动模式下，会自动加载编译的文件，只需要在浏览器中刷新即
        可
</p>
</div>
</div>


<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> 可开tcp连接数的(http长连接) 测试</h2>
<div class="outline-text-2" id="text-3">
<p>
参考了<a href="http://www.metabrew.com/article/a-million-user-comet-application-with-mochiweb-part-1">http://www.metabrew.com/article/a-million-user-comet-application-with-mochiweb-part-1</a>
tcp<sub>load</sub><sub>test</sub>.erl
</p>
<div class="org-src-container">

<pre class="src src-erlang">%% tcp_load_test:start(10000).
%%或
%% tcp_load_test:start("http://localhost:8080/time",10000).
%% 实是际访问
%% http://localhost:8080/time?id=1
%% ...
%% http://localhost:8080/time?id=10000
</pre>
</div>
<p>
结果似乎是连接达到4000的时候，cpu 占用率已经极大，响应变慢
达到4900时，测试用的客户端，因
</p>
<div class="org-src-container">

<pre class="src src-sh">eheap_alloc: Cannot allocate 583848200 bytes of memory (of type <span style="color: #ffa07a;">"heap"</span>).
</pre>
</div>
<p>
  退出,
  客户端的cpu 似乎比mochiweb服务器的占用率大，故，若非单机测试，结果或许会好一
  些.
结果以下面格式在客户端显示出来
</p>
<div class="org-src-container">

<pre class="src src-sh"> {Active, Closed, Chunks}
{&#27963;&#21160;&#36830;&#25509;&#25968;&#65292;&#20851;&#38381;&#30340;&#36830;&#25509;&#25968;(&#27979;&#35797;&#36807;&#31243;&#20013;&#22987;&#32456;&#20026;0),&#30001;&#26381;&#21153;&#31471;&#31471;&#21457;&#36865;&#30340;chunks&#24635;&#25968;}
</pre>
</div>
</div>
</div>

</div>
</div>]]></description>
      <pubDate>2017-01-22</pubDate>
      <guid>http://jixiuf.github.io/blog/mochiweb_http_load.html</guid>
    </item>
    <item>
      <title>mysql压力测试</title>
      <link>http://jixiuf.github.io/blog/benchmark.html</link>
      <description><![CDATA[mysql压力测试]]></description>
      <pubDate>2017-01-22</pubDate>
      <guid>http://jixiuf.github.io/blog/benchmark.html</guid>
    </item>
    <item>
      <title>纪秀峰_个人简历</title>
      <link>http://jixiuf.github.io/author/</link>
      <description><![CDATA[个人简历]]></description>
      <pubDate>2017-01-10</pubDate>
      <guid>http://jixiuf.github.io/author/</guid>
    </item>
    <item>
      <title>linux拾遗</title>
      <link>http://jixiuf.github.io/blog/linux.html</link>
      <description><![CDATA[linux拾遗]]></description>
      <pubDate>2016-12-14</pubDate>
      <guid>http://jixiuf.github.io/blog/linux.html</guid>
    </item>
    <item>
      <title>android ndk 编译libpng openssl</title>
      <link>http://jixiuf.github.io/blog/android-ndk-compile-libpng-openssl.html</link>
      <description><![CDATA[android ndk 编译libpng openssl]]></description>
      <pubDate>2016-11-14</pubDate>
      <guid>http://jixiuf.github.io/blog/android-ndk-compile-libpng-openssl.html</guid>
    </item>
  </channel>
</rss>