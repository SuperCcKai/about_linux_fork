# -*- coding:utf-8 -*-
#+LANGUAGE:  zh
#+TITLE:     linux拾遗
#+AUTHOR:    纪秀峰
#+EMAIL:     jixiuf@gmail.com
#+DATE:     2013-02-17 日
#+DESCRIPTION:linux拾遗
#+KEYWORDS: @Linux
#+OPTIONS:   H:2 num:nil toc:t \n:t @:t ::t |:t ^:nil -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil
#+FILETAGS: @Linux
* 使某一目录下创建的所有文件目录的groupname 都是 当前用户所属的组
  #+BEGIN_SRC sh
    chmod g+s dir1
  #+END_SRC
  dir1以下的FILE和FOLDER组名都是当前用户所属的组
* umask
  umask就是指定“当前用户在建立文件或目录时候的属性默认值”
  对于文件来说，这一数字的最大值分别是6。
  目录则允许设置执行权限，这样针对目录来说，umask中各个数字最大可以到7。
  我们只要记住u m a s k是从权限中“拿走”相应的位即可。
  如：umask值为022，则默认目录权限为755，默认文件权限为644。
  对于组权限，setfacl设置的权限只对主组（即useradd -g或usermod -g的组）
  有效，对附加组（即useradd -G或usermod -aG的组）无效，即使文件的所有组已改为附加组。
* setfacl
  /etc/fstab 里加 acl 选项
  #+BEGIN_QUOTE
   /dev/sda2		/		ext3		noatime,acl		0 1
  #+END_QUOTE
  mount -o remount /
#+BEGIN_SRC sh
  给某个用户设置权限：
  setfacl -m u:joe:rx bobdir/
  给某个组设置权限：
  setfacl -m g:aclgp1:rx bobdir/
  取消某项权限
  setfacl -x g:aclgp1 bobdir/
#+END_SRC
#+BEGIN_SRC sh
  setfacl命令可以识别以下的规则格式。

  [d[efault]:] [u[ser]:]uid [:perms]
  指定用户的权限，文件所有者的权限（如果uid没有指定）。

  [d[efault]:] g[roup]:gid [:perms]
  指定群组的权限，文件所有群组的权限（如果gid未指定）

  [d[efault]:] m[ask][:] [:perms]
  有效权限掩码

  [d[efault]:] o[ther] [:perms]
#+END_SRC
#+BEGIN_SRC sh
  setfacl -m d:g:groupA:rwx /path/to/perms

  The -m flag stands for "Modify" the existing ACL. The little d in front of g
  makes it a "Default" ACL, so that in future if any file/dir gets created under
  perms directory, groupA will have rwx permission on them too.
#+END_SRC
